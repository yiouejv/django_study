Django
    框架介绍
        Django是一个开源框架，2005年开发，采用python语言编写的。
        早期是主要做新闻和内容管理的网站
        Django本身提供了非常强大的后台管理系统

    版本：
        2.1.3
    使用
        1.11.8
    官网： http://www.djangoproject.com
    中文文档： 百度搜素 django book
                http://djangobook.py3k.cn/2.0/

框架模式
    MTV
        M: Models - 模型（数据库）
        T: Templates - 模板（网页）
        V: Views - 视图（逻辑）

    Django 框架的安装
        1. pip install django
            （安装Django的最新版本）
        2. sudo pip install django==1.11.8
            (安装指定版本的django)
        3. 离线安装

Django框架的使用
    1. 创建项目
        使用 django-admin 创建 Django 项目
        语法
            django-admin startproject 项目名称
    2. Django项目结构
        1. manage.py
            功能： 包含执行django中的各项操作的指令
            如：
                启动服务 runserver
    3. 主目录
        1. __init__.py
            项目的初始化文件，自动运行
        2. urls.py
            项目的基础路由配置文件
        3. wsgi.py
            Web Server Gateway Interface
            Web 服务网关接口
        4. settings.py
            项目的配置文件
            1. BASE_DIR
            2. ALLOWED_HOSTS
                设置允许访问到本项目的地址列表
                如果允许在网络中被其他的机器访问到的话
                推荐写["*"], 表示任何能够表示该机器的地址都能访问到该项目

                同时在启动服务时还需要指定地址和端口
                python3 manage.py runserver 0.0.0.0:8000
            3. INSTALLED_APPS
                指定已安装的应用，如果由自定义的应用的话需要在此注册
            4. MIDDLEWARE
                中间件，如果由自定义的中间件，需要在此注册
            5. ROOT_URLCONF
                指定项目的基础路由配置文件
            6. TEMPLATES
                配置模板的相应信息
            7. DATABASES
                配置数据库的信息
            8. LANGUAGE_CODE
                设置语言
                主要设置中文的话，允许将值改为'zh-Hans'
            9. TIME_ZONE
                指定时区，默认时区，允许将值更改为"Asia/Shanghai"

    4. url的使用
        1. urls.py
                默认在主目录中，主路由配置文件，会包含最基本的地址映射，每个
            地址访问都必须要先经过该文件
            作用：
                通过urls中定义好的地址找到对应的视图处理函数
            url.py:
                urlpattrens = [
                    url()
                ]

        2. url() 的语法
            作用：为了匹配用户的访问路径
            语法：
                from django.config.urls. import url
                url(regex, views, kwargs=None, name=None)

                regex: 匹配请求的url
                views: 地址匹配上之后要执行操作的视图处理函数
                kwargs: 字典，用来想views传参的，可以省略
                name: 为url起别名, 在地址反向解析时使用
            示例:
                访问地址: http://localhost:8000/01-show/
                需要在网页中输出: 我的第一个django程序

        3. 通过url向视图传参
            1. 使用正则表达式传参
                使用子组传参, 一个子组一个参数, 要传递多个参数的话需要使用多个子组, 中间用 / 隔开
                子组 - ()
                urls.py
                urlpatterns = [
                    # 访问路径是 /02-show/四位数组, 交给show02_views 去处理
                    url('^02-show/(\d{4})/$', show02_views),
                ]

                views.py
                def show02_views(request, arg1):
                    # arg1 表示的就是第一个子组的参数
                    pass

            2. 使用url的第三个参数 - 字典传参
                dic = {
                    'name': 'sasuke',
                    'age': 18,
                }
                '''urls.py'''
                    url(r"^show/$", show_view, dic),

                '''views.py'''
                def show_views(request, name, age):
                    name: 字典中name的值, 字符串
                    age: 字典中age的值, 整数
                    pass

    5. Django中的应用
        1. 什么是应用
            应用就是网站中的一个独立的模块
            如: 网易网站可分为若干应用组成
                1. 新闻应用: 与新闻相关的内容
                2. 汽车应用: 与汽车相关的内容
                3. 科技应用: 与科技相关的内容

            在django中, 主目录一般不处理具体的请求, 主目录一般处理的是项目的初始化操作
            处理的是初始化操作, 以及请求的分发(分布式请求处理), 而具体的请求是由各个应用去处理.

        2. 创建应用
            1. 指令
                ./manage.py startapp 应用的名称
            2. 需要在settings.py 中进行注册
                在INSTALLED_APPS 中追加应用的名称来注册应用
                INSTALLED_APPS = [
                    'django.contrib.admin',
                    ... ...
                    '自定义的应用名称'
                ]

        3. 应用的解析组成
            1. migrations 文件夹
                存放数据库的中间文件
            2. __init__.py
                应用的初始化文件
            3. admin.py
                应用的后台管理配置文件
            4. apps.py
                和应用的属性配置文件
            5. models.py
                Models 与 模型相关的映射文件
            6. tests.py
                应用的单元测试文件
            7. views.py
                视图处理函数的文件

        4. 分部式的路由系统
            在每个应用中分别创建urls.py, 格式参考主路由文件
            目的
                为了处理各个应用中的请求路由
            用法
                1. 在主目录的urls.py 中导入include
                    示例
                        from django.conf.urls import include
                2. 在主目录的urls.py 的urlpatterns 中转发 包含具体前缀的url规则
                    示例
                        urlpatterns = [
                            url(r'^admin/', admin.site.urls),
                            # 当访问路径的url前缀为music/时, 提交到django_study_1下的urls去匹配
                            url(r'^django_study_1/', include('django_study_1.urls')),
                        ]
                3. 在子应用的urls.py中定义 子应用的url规则
                    示例
                        from django.conf.urls import url
                        urlpatterns = [

                        ]








    练习
        访问地址为: /03-show/四位数字/两位数字/两位数字/
        在网页中输出生日: 生日为: xxxx年xx月xx日


































