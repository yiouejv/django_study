Django
    框架介绍
        Django是一个开源框架，2005年开发，采用python语言编写的。
        早期是主要做新闻和内容管理的网站
        Django本身提供了非常强大的后台管理系统

    版本：
        2.1.3
    使用
        1.11.8
    官网： http://www.djangoproject.com
    中文文档： 百度搜素 django book
                http://djangobook.py3k.cn/2.0/

框架模式
    MTV
        M: Models - 模型（数据库）
        T: Templates - 模板（网页）
        V: Views - 视图（逻辑）

    Django 框架的安装
        1. pip install django
            （安装Django的最新版本）
        2. sudo pip install django==1.11.8
            (安装指定版本的django)
        3. 离线安装

Django框架的使用
    1. 创建项目
        使用 django-admin 创建 Django 项目
        语法
            django-admin startproject 项目名称
    2. Django项目结构
        1. manage.py
            功能： 包含执行django中的各项操作的指令
            如：
                启动服务 runserver
    3. 主目录
        1. __init__.py
            项目的初始化文件，自动运行
        2. urls.py
            项目的基础路由配置文件
        3. wsgi.py
            Web Server Gateway Interface
            Web 服务网关接口
        4. settings.py
            项目的配置文件
            1. BASE_DIR
            2. ALLOWED_HOSTS
                设置允许访问到本项目的地址列表
                如果允许在网络中被其他的机器访问到的话
                推荐写["*"], 表示任何能够表示该机器的地址都能访问到该项目

                同时在启动服务时还需要指定地址和端口
                python3 manage.py runserver 0.0.0.0:8000
            3. INSTALLED_APPS
                指定已安装的应用，如果由自定义的应用的话需要在此注册
            4. MIDDLEWARE
                中间件，如果由自定义的中间件，需要在此注册
            5. ROOT_URLCONF
                指定项目的基础路由配置文件
            6. TEMPLATES
                配置模板的相应信息
            7. DATABASES
                配置数据库的信息
            8. LANGUAGE_CODE
                设置语言
                主要设置中文的话，允许将值改为'zh-Hans'
            9. TIME_ZONE
                指定时区，默认时区，允许将值更改为"Asia/Shanghai"

    4. url的使用
        1. urls.py
                默认在主目录中，主路由配置文件，会包含最基本的地址映射，每个
            地址访问都必须要先经过该文件
            作用：
                通过urls中定义好的地址找到对应的视图处理函数
            url.py:
                urlpattrens = [
                    url()
                ]

        2. url() 的语法
            作用：为了匹配用户的访问路径
            语法：
                from django.config.urls. import url
                url(regex, views, kwargs=None, name=None)

                regex: 匹配请求的url
                views: 地址匹配上之后要执行操作的视图处理函数
                kwargs: 字典，用来想views传参的，可以省略
                name: 为url起别名, 在地址反向解析时使用
            示例:
                访问地址: http://localhost:8000/01-show/
                需要在网页中输出: 我的第一个django程序

        3. 通过url向视图传参
            1. 使用正则表达式传参
                使用子组传参, 一个子组一个参数, 要传递多个参数的话需要使用多个子组, 中间用 / 隔开
                子组 - ()
                urls.py
                urlpatterns = [
                    # 访问路径是 /02-show/四位数组, 交给show02_views 去处理
                    url('^02-show/(\d{4})/$', show02_views),
                ]

                views.py
                def show02_views(request, arg1):
                    # arg1 表示的就是第一个子组的参数
                    pass

            2. 使用url的第三个参数 - 字典传参
                dic = {
                    'name': 'sasuke',
                    'age': 18,
                }
                '''urls.py'''
                    url(r"^show/$", show_view, dic),

                '''views.py'''
                def show_views(request, name, age):
                    name: 字典中name的值, 字符串
                    age: 字典中age的值, 整数
                    pass

    5. Django中的应用
        1. 什么是应用
            应用就是网站中的一个独立的模块
            如: 网易网站可分为若干应用组成
                1. 新闻应用: 与新闻相关的内容
                2. 汽车应用: 与汽车相关的内容
                3. 科技应用: 与科技相关的内容

            在django中, 主目录一般不处理具体的请求, 主目录一般处理的是项目的初始化操作
            处理的是初始化操作, 以及请求的分发(分布式请求处理), 而具体的请求是由各个应用去处理.

        2. 创建应用
            1. 指令
                ./manage.py startapp 应用的名称
            2. 需要在settings.py 中进行注册
                在INSTALLED_APPS 中追加应用的名称来注册应用
                INSTALLED_APPS = [
                    'django.contrib.admin',
                    ... ...
                    '自定义的应用名称'
                ]

        3. 应用的解析组成
            1. migrations 文件夹
                存放数据库的中间文件
            2. __init__.py
                应用的初始化文件
            3. admin.py
                应用的后台管理配置文件
            4. apps.py
                和应用的属性配置文件
            5. models.py
                Models 与 模型相关的映射文件
            6. tests.py
                应用的单元测试文件
            7. views.py
                视图处理函数的文件

        4. 分部式的路由系统
            在每个应用中分别创建urls.py, 格式参考主路由文件
            目的
                为了处理各个应用中的请求路由
            用法
                1. 在主目录的urls.py 中导入include
                    示例
                        from django.conf.urls import include
                2. 在主目录的urls.py 的urlpatterns 中转发 包含具体前缀的url规则
                    示例
                        urlpatterns = [
                            url(r'^admin/', admin.site.urls),
                            # 当访问路径的url前缀为music/时, 提交到django_study_1下的urls去匹配
                            url(r'^django_study_1/', include('django_study_1.urls')),
                        ]
                3. 在子应用的urls.py中定义 子应用的url规则
                    示例
                        from django.conf.urls import url
                        urlpatterns = [

                        ]








    练习
        访问地址为: /03-show/四位数字/两位数字/两位数字/
        在网页中输出生日: 生日为: xxxx年xx月xx日


##############  two day
    ### 路由配置
        1. 访问路劲 http://localhost:8000/django_study_2/
            想交给 django_study_2 应用中的index() 去处理

        2 . 只要访问路径不是admin/ music/ sport/ news/时，全部交给index处理
            url(r'^', include("index.urls")),

    ### django 中的模板，Templates
        1. 什么是模板
            模板就是要动态呈现给用户的网页
            模板的本质就是网页，前后端， 动静结合的网页
            django中的模板引擎是由django自己提供的，而并非Jinja2,
            所以Django中的模板的语法与flask(Jinja2)的语法会稍有不同
        2. Django模板的设置
            在setting.py中设置 TEMPLATES 的变量
            1. BACKEND
                指定使用的模板的引擎
            2. DIRS
                指定模板的存放目录们
                DIRS = [os.path.join(BASE_DIR, 'templates')]  # 在项目的根目录的templates目录中存放所有模板
                DIRS = ['index.temp', 'music.temp']  # 在项目的index应用中的temp目录中存放模板
                                               # 以及  在项目的music应用中的temp目录中存放模板
            3. APP_DIRS
                表示是否自动搜索应用中的目录
                True: 表示要自动搜索应用中的templates的目录

        3. 模板的加载方式
            1. 通过loader 对象获取模板，再通过HttpResponse进行响应
               * 先导入loader
               * 通过loader加载模板
               * 将加载好的模板渲染成字符串
               * 通过HttpResponse 将字符串进行响应
                '''pythom
                    from django.template import loader
                    template = loader.get_template('index.html')
                    template = template.render()
                    return HttpResponse(template)
                '''
            2. 使用render 直接加载并响应模板
                return render(request, "name")
        4. 模板的语法
            1. 变量
                作用：
                    将后端的数据传递到模板上进行显示
                数据类型
                    字符串
                    整数
                    列表
                    元祖
                    字典
                    函数对象
                变量的语法规范
                    变量必须要封装到字典中参能传递给模板

//////////////
练习：
    1. 访问路径： http://127.0.0.1:8000/var/
    2. 在视图中需要传递以下数据到模板中
        姓名：王老师
        年龄：30
        性别：男
        喜欢的一句话：天下没有吃不散的宴席
    3. 在模板上分别使用h3显示以上内容
//////////////

            2. 标签
                作用
                    将服务器的功能嵌入到模板中
                语法
                    {% 标签名 %}

                    {% end标签名 %}

                常用标签
                    if
                        {% if %}

                        {% elif %}

                        {% else %}

                        {% endif %}
                    for
                        {% for 变量 in iterable %}

                        {% endfor %}
                        内置变量 forloop
                            在循环中允许使用forloop内置变量来获取循环的信息
                            forloop.counter: 记录当前循环遍历的次数
                            forloop.counter0: 记录当前循环遍历的次数，从0开始
                            forloop.revcounter: 记录当前元素从后向前算的位置
                            forloop.revcounter0: 记录当前元素从后向前算的

                            forloop.first: 判断是否是第一次的循环
                            forloop.last: 判断是否是最后一次的循环


            3. 过滤器
                1. 在变量输出之前，对变量的数据进行筛选和过滤
                2. 过滤器的语法
                    {{ 变量|过滤器:参数 }}
                3. 常用过滤器
                    {{ value | upper }}
                        将value转为大写
                    {{ value | lower }}
                        将value转为小写
                    {{ value | add:num }}
                        将num追加到value之后
                        value 和 num 可以是列表
                    {{ value | truncatechars:n }}
                        将value截取n为字符，后面以...来显示

            4. 静态文件的处理
                1. 无法与服务器进行动态交互的文件
                2. 在django中静态文件的处理
                    在setting.py中设置有关静态文件的信息
                    1. 设置静态文件的访问路径
                        在浏览器中通过那个地址能够找到静态文件
                        STATIC_URL = '/static/'
                        如果访问路径是 http://localhost:8000/static/...
                        一律都按照静态文件的方式去查找，不经过路由
                    2. 设置静态文件的存储路径
                        指定静态文件要保存在服务器上哪个目录处
                            STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
                        静态文件目录的存放位置
                            * 在项目的根目录去创建一个static，用来保存静态文件们
                    3. 访问静态文件
                        1. 直接使用静态文件访问路径进行访问
                            http://localhost:8000/static/...
                        2. 使用{% static %} 访问静态资源
                            * 在使用之前需要通过{% load static %} 加载static
                            * 使用静态资源时
                                <img src="{% static "images/1.jpg" %}">

///////
    1. 创建项目 FruitDay
    2. 创建应用 index 并实现应用配置
    3. 访问 http://127.0.0.1:8000
        调用 index 应用中的index函数
    4. 在index() 函数内
        渲染天天果园首页模板
    5. 处理好静态文件配置


///////
    1. 模板
        继承
        父模板
            {% block 名称 %}

            {% endblock %}

        子模版
            {% extends "父模板的名称" %}

            block
    2. 反向解析
        url name 属性- 反向解析
        url(regex, views, name=''),
           模板
                {% url "name" "arg" "" %}
           视图
                reverse(name, agrs=(arg1, arg2)),

    3. 模型
        模型类（实体类）
            ./manager.py makemigrations
                将models.py中的内容生成中间文件
            ./manager.py migrate
                将中间文件映射到数据库中
        创建模型
            class ModelName(models.Model):
                属性名 = models.字段类型(字段选项)
            字段类型
                CharField()
                EmailField()
                URLField()
                ImageField()
                IntegerField()
                FloatField()
                DecimalField()
                BolleanField()
                DateField()
                DataTimeField()
                TextField()
            字段选项
                1. default
                2. null: True 或 False
                3. db_column: 指定列名
                4. db_index: True 或 False 创建索引

===========================================================
1. 模型
    相应的指令
        版本的切换指令
            0001-initial.py
            0002-xxxx.py
            0003-xxxx.py
        ./manage.py migrate 应用的名称 版本号

    通过数据库自动导出models类
        ./manage.py inspectdb > 文件名.py

2. 模型中的CRUD
    1. 增加数据
        1. Entry.objects.create(属性=值，属性=值)
            返回值
                插入成功：返回创建好的实体对象
                插入失败：返回None，产生异常

        2. 创建一个Entry对象，并通过save()进行保存
            obj = Entry(属性=值, 属性=值)
            obj.属性 = 值
            obj.save()
                无返回值，保存成功后，obj会被重新赋值

        3. 通过一个字典创建一盒Entry对象，通过save()方法保存

    2. 查询数据
        通过Entry.objects 调用查询接口函数
            Entry.objects.all()  # 得到表中所有的数据
            Entry.objects 提供了对该实体的所有的数据的查询

        所有的查询接口函数都可以通过query属性来得到对应的sql语句
            例如： Entry.objects.all().query

        1. 获取所有查询结果的方法
            方法:
                all()
            用法:
                Enrty.objects.all()
            返回:
                QuerySet(查询结果集，本质是一个封装了若干对象的列表)
        2. 查询返回指定列
            方法:
                values() | values('列名1', '列名2')
            作用：
                查询表中数据的部分列，封装到字典中，再封装到QuerySet中
            返回：
                QuerySet(查询结果集，本质是一个封装了若干字段的列表)

        3. 查询返回指定列
            方法
                values_list()
            作用
                将数据封装到元组中再封装到列表中

        4. 排序方法
            方法
                order_by()
            语法:
                Entry.objects.order_by('col1', '-col2')
                默认是升序排序，列名前加-，则表示降序排序

        5. 查询只返回一条数据
            方法
                get(条件)
            注意
                该方法只使用于只能查询出一条结果的场合
                如果查询多于一条数据或没查询出结果都会抛出异常
            返回
                单个实体对象
        6. 根据条件查询部分行
            方法：
                filter(条件)
            返回
                QuerySet
            ex:
                查询Author实体中id=1的信息
                authors = Author.objects.filter(id=1)

            非等值条件需要使用查询谓词 Field Lookup
            语法
                Entry.objects.filter(属性__查询谓词=值)
            注意
                * 每个查询谓词都是一个独立的功能条件
                    __exact: 等值条件判断
                    __gt: 大于条件判断
                    __year: 得到日期中的年份再进一步判断
                    __contains: 模糊查询'%xxx%'
                    __range: 模糊查询 between add
                    ... ...
                * 所有支持条件查询的位置处都支持查询谓词
                    filter() get() exclude()

        7. 对条件取反
            方法
                exclude(条件)
            ex：
                Author.objects.exclude(id=1)
                select * from author where not(id=1)

        8. 聚合查询（不带分组）
            方法
                aggregate(列名=聚合函数('列'))
            ex:
                Author.objects.aggregate(sumAge=Avg('age'))

            聚合函数
                1. Avg(): 平均值
                2. Count(): 数量
                3. Sum(): 求和
                4. Min(): 求最小值
                5. Max(): 求最大值
        9. 聚合查询（带分组）
            方法
                annotate(名字=聚合函数('列'))
                ex:
                    按id分组查询平均年龄
                Author.objects.values('id').annotate(avg_age=Avg('age'))

            集结 where，分组查询，having 于一体的查询接口
                Author.objects
                .filter(id__gte=3)  # where子句
                .values('age')  # group by
                .annotate(avgAge=Avg('age'))  # 查询聚合函数
                .filter(avgAge__gte>20)  # having子句
                .order_by('')  # 子句

    3. 修改数据
        1. 修改单个实体
            查， 改， 保存
        2. 批量修改数据
            调用QuerySet的update(属性=值, 属性=值)实现批量修改
    4. 删除数据
        调用实体对象或查询结果集的delete()方法来完成删除
        * 删除单个对象
         au = Author.objects.get(id=1)
         au.delete()

        * 批量删除
            Author.objects.all().delete()


练习：
    通过django的orm，查询出Author实体中，年龄大于平均年龄的人的信息



#################################  django_study_4
1. 模型
    1. F查询  Q查询
        F()
            作用
                在执行过程中获取某列的值
            语法
                from django.db.models import F
                F('列名'): 得到某列的值
            Author.objects.all().update(age=F('age')+10)
        Q()
            作用
                在查询条件中可以完成or操作
                from django.db.models import Q
            语法
                Q(条件1)|Q(条件2)

            查询id>=3 或 年龄小于60的信息

    2. 原生的数据库操作方法
        * 查询
            函数: raw(sql语句)
            语法：Entry.objects.raw(sql)
            返回值
                QuerySet()

        * 增删改
            from django.db import connection
            def do_sql(request):
                with connection.curso() as cursor:
                    sql = '...';
                    cursor.execute(sql)  # 影响的行数
                return xx


2. 使用后台管理 Models
    1. 后台配置
        登陆地址： /admin/
        创建后台管理员（超级用户）:
            ./manage.py createsuperuser

    2. Models 的基本管理
        1. 在应用中的admin.py中注册要管理的实体类
            admin.py作用：
                注册要管理的Models类，只有注册之后才能管理
            注册Models
                admin.site.register()
        2.  *重写每个实体类中的__str__()方法，
              后台显示的将以__str__()的返回值为准
            * 为实体类中的属性们添加字段选项 verbose_name
                用于修改显示的字段名
        3. 通过Model类的内部类Meta定义其展现形式
            class Author(models.Model):
                name = models.CharField(max_length=20)

                class Meta():
                    1. db_table = ''  # 指定该实体类映射到表的名称，该属性设置完成后需要同步回数据库
                    2. verbose_name = ''
                        定义类在admin中显示的名字(单数)
                    3. varbose_name_plural
                        定义类在admin中显示的名字(复数)
                    4. ordering
                        指定数据在后台管理中的排序方式
                        取值一个列表，指定排序列，默认升序，降序使用-

    3. Models 的高级管理
        1. 在admin.py中创建高级管理类并注册
            * 创建 EntryAdmin类，继承自admin.ModelAdmin
                class AuthorAdmin(admin.ModelAdmin):
                    pass
            * 注册高级管理类
                admin.site.register(Entry, EntryAdmin)
                ex:
                    admin.site.register(Author, AuthorAdmin)
        2. 允许在EntryAdmin中增加的属性
            * list_display
                作用
                    定义在列表也上显示的字段们
                取值：
                    由模型类中对象的属性名组成的元组或列表
            * list_display_links
                作用
                    定义在列表页上也能够链接到详情页的字段们
            * list_editable
                作用
                    定义在列表页上就能够修改的字段们
                取值
                    只能出现在list_display中，不能出现在list_display_links中
            * search_fields
                作用
                    在列表页的偏上添加一个搜索栏，、
                    定义搜索栏中允许搜索的字段值们
            * list_filter
                作用
                    在列表页的右侧增加过滤器来实现快速筛选
            * date_hierarchy
                作用
                    在列表页的顶部会增加一个时间选择器，取值属性必须是DateField 或 DateTimeField的列
            * fields
                作用
                    在详情页面中，指定要显示那些字段并按照什么顺序显示
            * fieldsets
                作用
                    在详情页中对字段们进行分组显示
                注意
                    fieldssets 与 fields 不能共存
                取值
                    fieldssets = [
                        # 分组1
                        ('分组名称', {
                            'fields': ('属性1', '属性2'),
                            'classes': ('collapse',)  # collapse 折叠
                        }),

                        # 分组2
                    ]



练习
    完成Publisher 的高级管理功能
    1. 在列表页上显示 name，address， city 属性
    2. address 和 city 是可以编辑的
    3. 右侧增加过滤器，允许按照city进行筛选
    4. 顶部增加一个搜索框允许按照name， website进行筛选
    5. 详情页中分组显示
        1. name, address, city 为'基本选项'分组
        2. country， website为'高级选项'分组且可折叠




3. 关系的映射
    1. 一对一映射
        1. 语法
            在关联的两个类中的任何一个类都可以增加对另一个类的引用

            属性 = modles.OneToOneField(Entry)
            ex：
                class Author(models.Model):
                    ...  ...

                class Wife(models.Model):

                    ... ...
                    # 增加一对一的引用
                    author = modles.OneToOneField(Author)
            在数据库中
                * 会生成一个外键(author_id)列在wife表中, 会引用在author表的主键
                * 在Author中， 会增加一个隐式属性，来表示author所对应的wife（其实反向引用属性）

        2. 查询
            * 正向查询：通过wife 找 author
                特点： 通过自定义的关联属性去查找对应的实体
                    wife = Wife.objects.get(id=1)
                    author = wife.author
            * 反向查询：通过author 找 wife
                特点： 通过反向引用属性去查找对应的实体
                    author = Author.objects.get(id=1)
                    wife = author.wife
            练习:
                通过姓名为'魏夫人' wife信息查找对应的author，打印在终端上
                通过姓名为'王老师' wife信息查找对应的wife，打印在终端上


    2. 一对多映射
        语法
            在'多'表中增加对'一'表的外键引用
            在'多'实体中增加对'一'实体的引用
            在'多'的实体中增加
                属性 = models.ForeignKey(Entry)
            ex:
                Book   Publisher
                多       一
                class Book(models.Model):
                    ... ...
                    publisher = models.ForeignKey(Publisher)
            数据库中体现
                Book 表中增加一个外键列 publisher_id, 引用自Publisher 表中的主键
            在实体中
                * Book中会有一个publisher 属性来表示对应的Publisher 的对象
                * Publisher 中会由一个隐式属性 book_set, 用来表示该publisher对应的所有的Book对象的查询


    3. 多对多映射
        语法
            在关联的两个类的任意一个类中，增加
                属性 = models.ManyToManyField(Entry)
                ex
                    Author   Book 可以的是多对多关联关系
                    1为author 可以出版多本book
                    1本book 可以由多位author 联合编写

                class Author(models.Model):
                    ... ...

                class Book(models.Model):
                    ... ...
                    authors = models.ManyToManyField(Author)

                正向引用：
                    在Book中通过 authors 来表示对应的所有的书籍的查询
                反向引用
                    在Author 中通过 book_set 来表示对应的所有的作者们的查询

        实现多对多在 django_study_4 models.py 中实现

        练习
            创建Author 与 Publisher 之间的关系
            1个Publisher 可以由多名 签约Author
            1名Author也可以有多个签约Publisher


        查询：
            通过 Book 查询 Author 以及 反向查

            class Author(models.Model):
                    ... ...

                class Book(models.Model):
                    ... ...
                    authors = models.ManyToManyField(Author)
            正向查询：通过 Book 查询 authors
                authors = book.authors.all()
            反向查询
                books = author.book_set.all()


自定义查询对象 - objects
    objects 的 属性的类型为 models.Manager
    1. 声明 EntryManager 类，继承自models.Manager
        允许在 EntryManager 中增加自定义函数

        class EntryManager(models.Manager):
            def 函数名(self):
                ... ...
                return ...
    2. 使用给EntryManager 覆盖Models类中覆盖原有的objects
        class Entry(models.Model):
            objects = EntryManager()

    练习
        * 在Author 中增加自定义方法
            查询 Author 中年龄小于指定人的信息
        * 在Book中增加自定义方法
            查询书名中包含指定关键字的书籍数量



HttpRequest - 请求
    1. 什么是HttpRequest
        HttpRequest 对请求对象的封装， 里面封装的是请求过程中的所有信息
        在Django中HttpRequest 被封装成request对象并封装到视图处理函数中，在调用视图时自动导入
    2. HttpRequest 中的主要内容
        1. request.scheme: 请求协议
        2. request.post: 请求主体
        3. request.path: 请求路径
        4. request.get_full_path: 请求完整路径
        5. request.get_host(): 请求主机地址 / 域名
        6. request.method: 请求方法
        7. request.GET: 封裝了get請求s方式提交的數據
        8. request.POST: 封裝了POST請求方式提交的數據
        9. request.cookies: 封裝了 cookies中的所有數據
        10. request.META: 封裝了請求的元數據
            request.META.HTTP_REFERER: 封裝了請求的源地址
    3. 获取请求提交的数据
        1. get 请求
            * 获取数据
                request.GET['名称']
                request.GET.get('名称')
                request.GET.getlist('名称')
            * 使用get方式提交数据的场合
                表单中method 为 get 的时候
                地址栏上拼查询字符串的时候
                    注意：
                        url('^/(\d{1,4})/(\d{1,4})$', xxx),
                        http://localhost:8000/2018/10
                        以上方式提交的数据不能使用request.GET来获取
                        因为以上的方式是 Django的标准而并非是 HTTP的标准

            练习
                http://localhost:8000/request/?year=2018&month=11&day=19
                实际请求地址：
                    http://localhost:8000/django_study_5/request2/?year=2018&month=11&day=19

        2. post 请求
            * 获取数据
                request.POST['名称']
                request.POST.get('名称')
                request.POST.getlist('名称')
            * 使用post方式提交数据的场合
                使用表单提交时可以使用post
            * CSRF verification failed (403)
                CSRF: Cross Site Request Forgery
                    跨站域请求伪造
                解决方案
                    1. 取消csrf验证
                        删除 setting.py 中 MIDDLEWARE 中的 CsrfViewMiddleware 中间件
                    2. 在处理函数上增加一个装饰器
                        @csrf_protect
                    3. 在表单中的第一行增加{% csrf_token %}



使用 forms 模块处理表单
    1. form 模块的使用
        通过forms模块，允许将表单与class结合（表单与实体类结合），允许通过class生成表单
    2. 使用forms模块
        * 在应用中创建form.py 模块
        * 导入forms模块
            from django import forms
        * 创建class 表单类
            class ClassName(forms.Form):
                pass
        * 创建属性
            一个属性对应到表单中生成一个控件

    3. 在模板中解析form对象
        * 注意
            在模板中，需要
                自定义 <form></form>
                自定义 提交按钮
        * 处理方法
            * 在views中创建form的对象并发送到模板上
                form = RemarkForm()
                return render(request, 'xxx.html', context)

            * 在模板中进行解析
                手动解析
                    {% for field in form %}
                        {{ field }}
                            表示的就是form对象中的一个独立属性
                            表示的也就是一个独立的控件
                        {{ field.label }}
                            表示的是控件中label参数的值
                    {% endfor %}
                自动解析
                    * {% form.as_p %}
                        将form对象中的每个属性使用p标记包裹起来再显示
                    * {% form.as_ul %}
                        将form对象中的每个属性使用li标记包裹起来再显示
                        注意：
                            必须手动提供 <ol> 或 <ul>
                    * {% form.as_table %}
                        将form对象中的每个属性用tr标记包裹起来，再显示
                        注意:
                            必须手动提供<table>
























































